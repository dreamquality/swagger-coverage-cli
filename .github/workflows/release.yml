name: Release to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major, or specific version)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - specific
      specific_version:
        description: 'Specific version (only if version_type is "specific")'
        required: false
        type: string
      dry_run:
        description: 'Dry run (publish with --dry-run flag)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    environment: npm-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version (patch/minor/major)
        if: ${{ inputs.version_type != 'specific' }}
        run: |
          npm version ${{ inputs.version_type }} --no-git-tag-version
          echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Update version (specific)
        if: ${{ inputs.version_type == 'specific' }}
        run: |
          npm version ${{ inputs.specific_version }} --no-git-tag-version
          echo "NEW_VERSION=${{ inputs.specific_version }}" >> $GITHUB_ENV

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"

      - name: Push changes
        run: |
          git push origin ${{ github.ref_name }}
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## 🚀 swagger-coverage-cli v${{ env.NEW_VERSION }}
            
            ### ✨ New Features
            - **🌐 Multi-Protocol Support**: Native support for REST (OpenAPI/Swagger), gRPC (Protocol Buffers), and GraphQL schemas
            - **🔄 Mixed API Analysis**: Process multiple API specifications with different protocols in a single run  
            - **🎯 Protocol-Aware Matching**: Intelligent request matching tailored to each API protocol's characteristics
            - **📊 Unified Reporting**: Generate consolidated HTML reports with protocol-specific insights and color coding
            - **⚡ Universal CLI**: Single interface works across all supported protocols with consistent syntax
            
            ### 🎨 Enhanced Features
            - **Smart Endpoint Mapping**: Intelligent endpoint matching with status code prioritization enabled by default
            - **Enhanced Path Matching**: Improved handling of path parameters with different naming conventions
            - **Confidence Scoring**: Match quality assessment with 0.0-1.0 confidence scores
            - **Status Code Intelligence**: Prioritizes successful (2xx) codes over error codes for better coverage
            - **Multi-API Support**: Process multiple API specifications in a single run
            - **Enhanced HTML Reports**: Interactive reports with protocol identification and color coding
            
            ### 🎯 Protocol Support
            
            #### 📋 REST/OpenAPI
            - OpenAPI v2/v3 specifications (YAML/JSON)
            - Smart path matching with parameter variations
            - Request body and query parameter validation
            - Multiple status codes per operation
            
            #### ⚡ gRPC
            - Protocol Buffer (.proto) file parsing
            - Service and method extraction
            - HTTP/2 path mapping (/package.service/method)
            - Content-type validation (application/grpc)
            
            #### 🔀 GraphQL  
            - GraphQL schema (.graphql/.gql) parsing
            - Query, mutation, and subscription extraction
            - Type system with arguments and unions
            - Unified /graphql endpoint handling
            
            ### 🚀 Usage Examples
            ```bash
            # Single protocol APIs
            swagger-coverage-cli api.yaml collection.json           # OpenAPI/REST
            swagger-coverage-cli service.proto collection.json     # gRPC
            swagger-coverage-cli schema.graphql collection.json    # GraphQL
            
            # Mixed protocol APIs (Enterprise-ready)
            swagger-coverage-cli "api.yaml,service.proto,schema.graphql" collection.json
            
            # All existing options work across protocols
            swagger-coverage-cli "api.yaml,service.proto" collection.json --verbose --strict-body
            ```
            
            ### 🔧 Compatibility
            - ✅ Maintains backwards compatibility with existing workflows
            - ✅ Node.js 14+ required  
            - ✅ NPM package available globally
            - ✅ Smart mapping enabled by default
            - ✅ All existing CLI options work with new protocols
            
            ### 📦 Installation
            ```bash
            npm install -g swagger-coverage-cli@${{ env.NEW_VERSION }}
            ```
            
            ### 🧪 Quality Assurance
            - **147 Tests**: Comprehensive test suite covering all protocols and scenarios
            - **19 Test Suites**: Dedicated test coverage for each protocol and integration scenarios
            - **Edge Case Coverage**: Robust handling of malformed URLs, missing data, and complex scenarios
            - **Performance Tested**: Validated with large datasets and mixed protocol specifications
            - **Protocol Isolation**: Each protocol's parsing and matching logic is independently tested
            
            ---
            
            **Full Changelog**: https://github.com/dreamquality/swagger-coverage-cli/compare/v1.0.0...v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: Publish to NPM (dry run)
        if: ${{ inputs.dry_run }}
        run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        if: ${{ !inputs.dry_run }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Package:** [swagger-coverage-cli](https://www.npmjs.com/package/swagger-coverage-cli)" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** [v${{ env.NEW_VERSION }}](https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Key Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-protocol support (REST, gRPC, GraphQL)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Protocol-aware matching logic" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Mixed API analysis in single run" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smart endpoint mapping (enabled by default)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Status code prioritization" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced path matching" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Confidence scoring" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-API support" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Newman report support" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced HTML reports with protocol identification" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ YAML, JSON, CSV, .proto, .graphql support" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backwards compatibility" >> $GITHUB_STEP_SUMMARY
