type Query {
  user(id: ID!): User
  users(first: Int, after: String): UserConnection
  posts(userId: ID!): [Post!]!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(id: ID!, input: UpdateUserInput!): UpdateUserPayload
  deleteUser(id: ID!): DeleteUserPayload
  createPost(input: CreatePostInput!): CreatePostPayload
}

type Subscription {
  userUpdated(userId: ID!): User
  postCreated: Post
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  createdAt: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  createdAt: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input CreateUserInput {
  name: String!
  email: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: ID!
}

type CreateUserPayload {
  user: User
  errors: [String!]
}

type UpdateUserPayload {
  user: User
  errors: [String!]
}

type DeleteUserPayload {
  success: Boolean!
  errors: [String!]
}

type CreatePostPayload {
  post: Post
  errors: [String!]
}