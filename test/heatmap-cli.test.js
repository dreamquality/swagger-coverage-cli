const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

describe('CLI Heatmap Integration', () => {
  const tmpDir = path.join(__dirname, '../tmp');
  const testOutputPath = path.join(tmpDir, 'heatmap-cli-test.html');

  beforeAll(() => {
    // Ensure tmp directory exists
    if (!fs.existsSync(tmpDir)) {
      fs.mkdirSync(tmpDir, { recursive: true });
    }
  });

  afterEach(() => {
    // Clean up test output file
    if (fs.existsSync(testOutputPath)) {
      fs.unlinkSync(testOutputPath);
    }
  });

  test('CLI should generate heatmap report with --heatmap flag', () => {
    const swaggerFile = path.join(__dirname, 'fixtures/users-api.yaml');
    const postmanFile = path.join(__dirname, 'fixtures/test-collection.json');

    const command = `node cli.js "${swaggerFile}" "${postmanFile}" --heatmap --output "${testOutputPath}"`;
    
    let stdout;
    try {
      stdout = execSync(command, { 
        cwd: path.join(__dirname, '..'),
        encoding: 'utf8',
        timeout: 30000
      });
    } catch (error) {
      console.error('Command failed:', error.message);
      console.error('Stdout:', error.stdout);
      console.error('Stderr:', error.stderr);
      throw error;
    }

    // Verify command output
    expect(stdout).toContain('=== Swagger Coverage Report ===');
    expect(stdout).toContain('Heatmap report saved to:');
    expect(stdout).toContain(testOutputPath);

    // Verify file was created
    expect(fs.existsSync(testOutputPath)).toBe(true);

    // Verify file content
    const fileContent = fs.readFileSync(testOutputPath, 'utf8');
    expect(fileContent).toContain('API Coverage Heatmap');
    expect(fileContent).toContain('API Coverage Matrix');
    expect(fileContent).toContain('Endpoint Details');
    expect(fileContent).toContain('Users API');
    expect(fileContent).toContain('Toggle Theme');
    expect(fileContent).toContain('createHeatmapMatrix');
    expect(fileContent).toContain('Generated by swagger-coverage-cli (Heatmap Mode)');
  });

  test('CLI should generate regular report without --heatmap flag', () => {
    const swaggerFile = path.join(__dirname, 'fixtures/users-api.yaml');
    const postmanFile = path.join(__dirname, 'fixtures/test-collection.json');
    const regularOutputPath = path.join(tmpDir, 'regular-cli-test.html');

    const command = `node cli.js "${swaggerFile}" "${postmanFile}" --output "${regularOutputPath}"`;
    
    let stdout;
    try {
      stdout = execSync(command, { 
        cwd: path.join(__dirname, '..'),
        encoding: 'utf8',
        timeout: 30000
      });
    } catch (error) {
      console.error('Command failed:', error.message);
      throw error;
    }

    // Verify command output
    expect(stdout).toContain('=== Swagger Coverage Report ===');
    expect(stdout).toContain('HTML report saved to:');
    expect(stdout).toContain(regularOutputPath);

    // Verify file was created
    expect(fs.existsSync(regularOutputPath)).toBe(true);

    // Verify file content is regular report, not heatmap
    const fileContent = fs.readFileSync(regularOutputPath, 'utf8');
    expect(fileContent).toContain('Enhanced Swagger Coverage Report');
    expect(fileContent).not.toContain('API Coverage Heatmap');
    expect(fileContent).not.toContain('API Coverage Matrix');
    expect(fileContent).toContain('Chart.js'); // Regular report uses Chart.js
    expect(fileContent).toContain('Coverage Trend Over Time');

    // Clean up
    fs.unlinkSync(regularOutputPath);
  });

  test('CLI should show heatmap option in help', () => {
    const command = 'node cli.js --help';
    
    const stdout = execSync(command, { 
      cwd: path.join(__dirname, '..'),
      encoding: 'utf8'
    });

    expect(stdout).toContain('--heatmap');
    expect(stdout).toContain('Generate coverage heatmap');
    expect(stdout).toContain('endpoints nodes');
  });
});